defmodule Lanx.Jobs do
  @moduledoc false

  # Wrapper over the jobs ets table
  # {id, worker, system_arrival, worker_arrival, tau, failed?}

  @doc """
  Inserts a job given a map. Inserted jobs must have an id.
  """
  def insert(table, job = %{id: _id}) do
    job =
      Map.merge(
        Map.from_keys([:worker, :system_arrival, :worker_arrival, :tau, :failed?], nil),
        job
      )

    :ets.insert(table, to_tuple(job))
  end

  def insert(_table, job),
    do: raise(ArgumentError, "Jobs must have an id, got: #{inspect(job)}")

  @doc """
  Looks up a job givan a table and id
  """
  def lookup(table, id) do
    table |> :ets.lookup(id) |> hd |> to_map
  end

  @doc """
  Looks up jobs givan a table and worker
  """
  def lookup_by_worker(table, worker) do
    # match specification generated by :ets.fun2ms(fn x = {_, "foo", _, _, _, _} -> x end)
    table
    |> :ets.select([{{:_, worker, :_, :_, :_, :_}, [], [:"$_"]}])
    |> Enum.map(fn job -> to_map(job) end)
  end

  @doc """
  Updates a job given a map. Updated jobs must have an id.
  """
  def update(table, job = %{id: id}) do
    job = Map.merge(lookup(table, id), job)
    :ets.insert(table, to_tuple(job))
  end

  def update(_table, job),
    do: raise(ArgumentError, "Jobs must have an id, got: #{inspect(job)}")

  @doc """
  Deletes a job given table and id
  """
  def delete(table, id), do: :ets.delete(table, id)

  @doc """
  Counts the number of jobs given a table
  """
  # match specification generated with :ets.fun2ms(fn _x -> true end)
  def count(table), do: :ets.select_count(table, [{:"$1", [], [true]}])

  @doc """
  Dumps the contents of the table
  """
  def dump(table) do
    Enum.map(:ets.tab2list(table), &to_map(&1))
  end

  defp to_map(tuple) do
    {id, worker, system_arrival, worker_arrival, tau, failed?} = tuple

    %{
      id: id,
      worker: worker,
      system_arrival: system_arrival,
      worker_arrival: worker_arrival,
      tau: tau,
      failed?: failed?
    }
  end

  def to_tuple(job) do
    {job.id, job.worker, job.system_arrival, job.worker_arrival, job.tau, job.failed?}
  end
end
